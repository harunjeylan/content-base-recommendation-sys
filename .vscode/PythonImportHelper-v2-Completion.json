[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "MilvusClient",
        "importPath": "pymilvus",
        "description": "pymilvus",
        "isExtraImport": true,
        "detail": "pymilvus",
        "documentation": {}
    },
    {
        "label": "SentenceTransformer",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "get_recommendations",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_recommendations(user_id, top_n=10):\n    try:\n        # Content-based filtering\n        user_interactions_sorted = user_interactions[user_interactions['user_id'] == user_id].sort_values(by='interaction_type', ascending=False).head(2)\n        user_watched_videos = videos.loc[videos['video_id'].isin(user_interactions_sorted['video_id'].tolist())]\n        user_watched_videos = pd.merge(user_interactions_sorted[['video_id', 'interaction_type']], user_watched_videos, on='video_id', how='left')\n        video_content = user_watched_videos['title'] + ' : ' + user_watched_videos['description']\n        user_watched_embeddings = embed_model.encode(video_content.to_list())\n        search_results = client.search(\n            collection_name=collection_name,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "embed_model",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "embed_model = SentenceTransformer('intfloat/e5-base-v2')\nvideo_embeddings = embed_model.encode(videos['title'] + ' : ' + videos['description'])\n# Initialize Milvus vector search\nclient = MilvusClient(\"milvus_demo.db\")\ncollection_name = 'video_embeddings'\nif not client.has_collection(collection_name=collection_name):\n    logging.info(\"Creating Milvus collection: 'video_embeddings'\")\n    client.create_collection(\n        collection_name=collection_name,\n        dimension=768,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "video_embeddings",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "video_embeddings = embed_model.encode(videos['title'] + ' : ' + videos['description'])\n# Initialize Milvus vector search\nclient = MilvusClient(\"milvus_demo.db\")\ncollection_name = 'video_embeddings'\nif not client.has_collection(collection_name=collection_name):\n    logging.info(\"Creating Milvus collection: 'video_embeddings'\")\n    client.create_collection(\n        collection_name=collection_name,\n        dimension=768,\n    )",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "client = MilvusClient(\"milvus_demo.db\")\ncollection_name = 'video_embeddings'\nif not client.has_collection(collection_name=collection_name):\n    logging.info(\"Creating Milvus collection: 'video_embeddings'\")\n    client.create_collection(\n        collection_name=collection_name,\n        dimension=768,\n    )\n    data = [{\"id\": video['video_id'], \"vector\": video_embeddings[i], \"video_id\": video['video_id']} for i, video in enumerate(videos.to_dict('records'))]\n    res = client.upsert(collection_name=collection_name, data=data)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "collection_name",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "collection_name = 'video_embeddings'\nif not client.has_collection(collection_name=collection_name):\n    logging.info(\"Creating Milvus collection: 'video_embeddings'\")\n    client.create_collection(\n        collection_name=collection_name,\n        dimension=768,\n    )\n    data = [{\"id\": video['video_id'], \"vector\": video_embeddings[i], \"video_id\": video['video_id']} for i, video in enumerate(videos.to_dict('records'))]\n    res = client.upsert(collection_name=collection_name, data=data)\n    logging.info(f\"Inserted {len(res)} entities into the collection.\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "user_id",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "user_id = 10\ntry:\n    recommendations = get_recommendations(user_id, top_n=10)\n    print(recommendations)\nexcept Exception as e:\n    logging.error(f\"Error in example usage: {e}\")",
        "detail": "main",
        "documentation": {}
    }
]